#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2016 EDF R&D
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you may download a copy of license
# from https://www.gnu.org/licenses/gpl-3.0.

"""
Convert Code_Aster COMM file(s) into AsterStudy API representation.
"""

import argparse
import os
import os.path as osp
import sys
import traceback

LIBDIR = ''

# Add libdir to sys.path...
if LIBDIR != '@' 'LIBDIR' '@':
    # ... for install tree.
    if not osp.isabs(LIBDIR):
        LIBDIR = osp.join(osp.dirname(osp.realpath(__file__)), LIBDIR)
        LIBDIR = osp.abspath(LIBDIR)
    sys.path.insert(0, LIBDIR)
else:
    # ... for source tree.
    sys.path.insert(0, osp.dirname(osp.realpath(__file__)))

def _check_text_diff(ref, cur):
    if ref != cur:
        from difflib import context_diff
        for line in context_diff(ref.split('\n'), cur.split('\n')):
            print(line)
        return False
    return True

def main(): # pragma pylint: disable=too-many-locals
    """Main function."""
    try:
        from asterstudy.common import debug_mode, version
        from asterstudy.datamodel import History, UndoRedo, comm2study, study2comm, study2code
    except ImportError as err:
        print('abort: could not find astergui libraries in [%s]' % ' '.join(sys.path),
              file=sys.stderr)
        print('(check your install and PYTHONPATH)', file=sys.stderr)
        if int(os.getenv('DEBUG', '0')):
            print('ERROR: %s' % err, file=sys.stderr)
            traceback.print_exc()
        return -1

    description = 'Convert Code_Aster COMM file into AsterStudy API.'
    formatter = lambda prog: argparse.ArgumentDefaultsHelpFormatter(prog, max_help_position=50,
                                                                    width=120)
    parser = argparse.ArgumentParser(formatter_class=formatter, description=description)
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s {}'.format(version()))
    parser.add_argument('-g', '--debug', action='store_true', help='turn debug mode on')
    parser.add_argument('comm_file', metavar='FILE', nargs='+', help='comm file')
    args = parser.parse_args()

    for comm_file in args.comm_file:
        if not osp.exists(comm_file):
            print('abort: \'{}\' does not exist'.format(comm_file), file=sys.stderr)
            return -1
        if not osp.isfile(comm_file):
            print('\'{}\' is not a file'.format(comm_file), file=sys.stderr)
            return -1

    if args.debug:
        debug_mode.DEBUG = 1

    for comm_file in args.comm_file:
        momento = UndoRedo(History())
        case = momento.model.current_case

        name = osp.splitext(osp.basename(comm_file))[0]
        stage = case.create_stage(name)
        momento.commit('create a stage')
        with open(comm_file) as cfile:
            text = cfile.read()

            comm2study(text, stage)
            momento.commit('populate this stage')

            for command in stage:
                command.check(safe=False)

            text1 = study2comm(stage)
            if args.debug:
                print(text1)

            stage2 = case.create_stage(name + '2')
            momento.commit('create another stage')

            text2 = study2code(stage, 'stage2')
            momento.commit('populate this stage')

            if args.debug:
                print(text2)

            exec(text2)  # pragma pylint: disable=exec-used

            for command in stage2:
                command.check(safe=False)

            text4 = study2comm(stage2)

            assert _check_text_diff(text1, text4)

    return 0

if __name__ == '__main__':
    sys.exit(main())
