#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2016 EDF R&D
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you may download a copy of license
# from https://www.gnu.org/licenses/gpl-3.0.

"""Convert Code_Aster COMM file(s) into AsterStudy document."""

import argparse
import os
import os.path as osp
import sys
import traceback

LIBDIR = ''

# Add libdir to sys.path...
if LIBDIR != '@' 'LIBDIR' '@':
    # ... for install tree.
    if not osp.isabs(LIBDIR):
        LIBDIR = osp.join(osp.dirname(osp.realpath(__file__)), LIBDIR)
        LIBDIR = osp.abspath(LIBDIR)
    sys.path.insert(0, LIBDIR)
else:
    # ... for source tree.
    sys.path.insert(0, osp.dirname(osp.realpath(__file__)))

def main(): # pragma pylint: disable=too-many-locals
    """Main function."""
    try:
        from asterstudy.common import ConversionError, debug_mode, version
        from asterstudy.datamodel import CATA, ConversionLevel, History, comm2study, study2comm
    except ImportError as err:
        print('abort: could not find astergui libraries in [%s]' % ' '.join(sys.path),
              file=sys.stderr)
        print('(check your install and PYTHONPATH)', file=sys.stderr)
        if int(os.getenv('DEBUG', '0')):
            print('ERROR: %s' % err, file=sys.stderr)
            traceback.print_exc()
        return -1

    description = 'Convert Code_Aster COMM file into AsterStudy document.'
    formatter = lambda prog: argparse.ArgumentDefaultsHelpFormatter(prog, max_help_position=50,
                                                                    width=120)
    parser = argparse.ArgumentParser(formatter_class=formatter, description=description)
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s {}'.format(version()))
    parser.add_argument('-g', '--debug', action='store_true', help='turn debug mode on')
    parser.add_argument('-e', '--export', action='store_true',
                        help='check re-import from study file to COMM file, test purpose only')
    parser.add_argument('-s', '--strict', action='store_true', help='strict import mode')
    parser.add_argument('-l', '--limit', type=int, default=0, help='passed to study2comm')
    parser.add_argument('comm_file', metavar='FILE', nargs='+', help='comm file')
    args = parser.parse_args()

    for comm_file in args.comm_file:
        if not osp.exists(comm_file):
            print('abort: \'{}\' does not exist'.format(comm_file), file=sys.stderr)
            return -1
        if not osp.isfile(comm_file):
            print('\'{}\' is not a file'.format(comm_file), file=sys.stderr)
            return -1

    history = History()
    case = history.current_case

    if args.debug:
        debug_mode.DEBUG = 1
        check_func = CATA.package('SyntaxChecker').checkCommandSyntax
        check_func.func_defaults = (True,)

    strict_mode = ConversionLevel.Syntaxic if args.strict else ConversionLevel.NoFail

    for comm_file in args.comm_file:
        name = osp.splitext(osp.basename(comm_file))[0]
        stage = case.create_stage(name)
        with open(comm_file, 'rb') as cfile:
            text = cfile.read()

        try:
            comm2study(text, stage, strict=strict_mode)
        except ConversionError as exc:
            print('Original traceback:\n', exc.details)
            raise

        for command in stage:
            command.check(safe=False)

        if not args.export:
            continue

        text1 = study2comm(stage, limit=args.limit)
        if args.debug:
            print(text1)

        if args.limit:
            # if the output is truncated, the text will be invalid
            continue

        stage = case.create_stage(name + '-debug')
        try:
            comm2study(text1, stage, strict=strict_mode)
        except ConversionError as exc:
            print('Original traceback:\n', exc.details)
            raise

        for command in stage:
            command.check(safe=False)

        text2 = study2comm(stage, limit=args.limit)
        if args.debug:
            print(text2)

        assert text1 == text2

    return 0

if __name__ == '__main__':
    sys.exit(main())
