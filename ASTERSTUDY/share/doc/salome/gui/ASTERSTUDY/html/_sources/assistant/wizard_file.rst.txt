.. _assistant-wizard:

***********
Wizard file
***********

**Wizard file** is a Python module implementing a wizard dialog, generated on
the basis of :ref:`declaration file <assistant-declaration>`.

In general, presence of static Python module implementing a wizard dialog is not
mandatory. *AsterStudy* application can generate wizard dialog dynamically
directly from the *declaration file*. Static *wizard file* can be created if an
additional customization of GUI behavior is needed. In this case, as soon as
*declaration file* is written, the *wizard file* implementing the GUI can be
generated by means of :ref:`command line tool <assistant-cmd-line-tool>`.

Then, all needed customizations can be added to this Python module:

- Add specific verification rules for data entered by the user;
- Implement and add custom widgets;
- Introduce specific business logic to manage relations between different
  controls, for instance, enable / disable some controls depending on a
  value of other control, etc;
- Introduce specific traversal paths through the sequence of pages
  (implementing so-called non-linear wizard), depending on user's choices
  entered in the pages.

Base implementation is automatically generated from *declaration file*.
Normally there is a top-level *Wizard* class, implementing dialog itself.
Standard widgets are provided within the *asterstudy.assistant.widgets*
Python module.

**Example**:

.. code-block:: python

    from asterstudy.assistant import widgets as AW
    from asterstudy.common import translate as tr

    class Wizard(AW.Wizard):
        """Wizard dialog."""
    
        def __init__(self, parent=None):
            """Create wizard."""
            super(Wizard, self).__init__(parent)
    
            title = tr("Wizard", "Calculation assistant")
            self.setWindowTitle(title)
            self.setModal(True)
            self.setObjectName("Test calculation assistant")
    
            # Page: Page 1
            title = tr("Wizard", "Test calculation assistant")
            sub_title = tr("Wizard", "Page 1")
            page = AW.WizardPage(title, sub_title=sub_title)
            page.setObjectName("Page 1")
            self.addPage(page)
    
            title = tr("Wizard", "Integer QLineEdit")
            widget = AW.LineEdit(
                title, typ="int", val_min=1, val_max=100, default=10)
            tooltip = tr("Wizard", "Description of PARAM1")
            widget.setToolTip(tooltip)
            widget.setObjectName("Integer QLineEdit")
            page.addWidget(widget)
            self.register("PARAM1", widget)

The Python module should export a *create_wizard* function that serves as a
factory, creating and returning an instance of a *wizard* dialog; this
function is automatically called from *AsterStudy* application when user
invokes a particular *Calculation Wizard* from menu.

.. code-block:: python

    def create_wizard(parent):
        """Factory function."""
        return Wizard(parent)
