# -*- coding: utf-8 -*-

# Copyright 2016 EDF R&D
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you may download a copy of license
# from https://www.gnu.org/licenses/gpl-3.0.

"""
ASTERSTUDY module
-----------------

Implementation of SALOME ASTERSTUDY module.

"""


import traceback

from asterstudy.common import debug_message, info_message
from asterstudy.gui.salomegui import AsterSalomeGui, get_aster_view_type

def get_salome_gui():
    """
    Get python interface module for SALOME GUI.

    Note:
        Properly deals with `Connect` feature of Salome.
    """
    import salome
    # Deal with `Connect` feature
    if not salome.sg.__dict__:
        import libSALOME_Swig
        return libSALOME_Swig.SALOMEGUI_Swig()
    return salome.sg

def get_salome_pyqt():
    """
    Get access to SALOME PyQt interface.

    Returns:
        SalomePyQt: SALOME PyQt interface
    """
    # pragma pylint: disable=no-member
    import SalomePyQt
    return SalomePyQt.SalomePyQt()

def get_aster_gui():
    """
    Get ASTERSTUDY GUI instance.

    Returns:
        AsterSalomeGui: SALOME AsterStudy GUI object
    """
    if not hasattr(get_aster_gui, "aster_gui"):
        get_aster_gui.aster_gui = AsterSalomeGui()
    return get_aster_gui.aster_gui

# note: the following pragma is added to prevent pylint complaining
#       about functions that follow Qt naming conventions; below API
#       comes from SALOME
# pragma pylint: disable=invalid-name

def initialize():
    """Initialize module."""
    debug_message("ASTERSTUDYGUI::initialize()")
    get_aster_gui().initialize()


def activate():
    """Activate module."""
    debug_message("ASTERSTUDYGUI::activate()")

    import salome
    salome.salome_init()
    smesh = salome.myStudy.FindComponent('SMESH')
    if smesh is not None:
        engine = salome.lcc.FindOrLoadComponent('FactoryServer', 'SMESH')
        builder = salome.myStudy.NewBuilder()
        builder.LoadWith(smesh, engine)

    print('preactivate finished!!')

    import SalomePyQt
    SalomePyQt.SalomePyQt().clearTool('Modules')
    SalomePyQt.SalomePyQt().getMainMenuBar().hide()

    return get_aster_gui().activate()


def deactivate():
    """Deactivate module."""
    debug_message("ASTERSTUDYGUI::deactivate()")
    get_aster_gui().deactivate()


def createPreferences():
    """Export preferences to common Preferences dialog."""
    debug_message("ASTERSTUDYGUI::createPreferences()")
    get_aster_gui().createPreferences()


def preferenceChanged(section, name):
    """Called when preferences item has been changed in Preferences dialog."""
    debug_message("ASTERSTUDYGUI::preferenceChanged()")
    get_aster_gui().preferenceChanged(section, name)


def windows():
    """
    Specify standard SALOME dock windows needed by module and their
    positions.

    Returns:
        dict: {window:position} where `window` is SalomePyQt.WindowType
        enumerator and `position` is Qt.DockWidgetArea enumerator
    """
    debug_message("ASTERSTUDYGUI::windows()")
    # we do not need any standard SALOME dock windows;
    # below line is needed to prevent default implementation.
    return {}


def views():
    """
    Specify view windows needed by module.

    Returns:
        list: result contains views' type names
    """
    debug_message("ASTERSTUDYGUI::views()")
    # we want our own view window to be automatically pop up
    # when module is activated.
    return [get_aster_view_type()]


def saveFiles(directory, url):
    """
    Save module data to the files.

    This callback function is automatically invoked from SALOME
    when a study is saved to an HDF file.

    The function saves the module data to one or more files in the
    directory specified as a parameter, and returns names of these
    files.

    Arguments:
        directory (str): A directory to store data files. Note: this can
            be not a final study destination folder but a temporary directly,
            depending on used save mode (single-file or multi-file).
        url (str): Actual study URL (the final study destination). Note:
            this parameter is provided for information purposes only!

    Returns:
        list: Names of files in which data is saved.
    """
    #debug_message("ASTERSTUDYGUI::saveFiles()", directory, url)
    print("ASTERSTUDYGUI::saveFiles()", directory, url)
    #print('return get_aster_gui().save(directory, url)',get_aster_gui().save(directory, url))
    return get_aster_gui().save(directory, url)


def openFiles(files, url): # pragma pylint: disable=unused-argument
    """
    Load data from the files.

    This callback function is automatically invoked from SALOME
    when a study is loaded from an HDF file.

    The function restores module data from the file(s) specified as a
    parameter.

    Arguments:
        files (list[str]): Data files in which module data is stored.
            Note: first element of this list is a directory name. File names
            are normally specified relatively to this directory.
        url (str): Actual study URL (the original study file path). Note:
            this parameter is provided for information purposes only!

    Returns:
        bool: *True* in case of success; *False* otherwise.
    """
    info_message("Opening AsterStudy JSON file...")
    debug_message("ASTERSTUDYGUI::openFiles()", files, url)
    print("ASTERSTUDYGUI::openFiles()", files, url)
    ok = False
    #activate()
    try:
        ok = get_aster_gui().load(files, url)
    except Exception: # pylint: disable=broad-except
        traceback.print_exc()
    info_message("JSON file reloaded")
    print('ok = ',ok)
    # asterstudy = get_salome_gui().getComponentUserName(str('ASTERSTUDY'))
    # get_salome_pyqt().activateModule(asterstudy)
    return ok

def closeStudy():
    """
    Process study closure.

    The function is called when SALOME study is closed, to perform
    needed clean-up of the data model.

    Arguments:
        study_id: study identifier
    """
    debug_message("ASTERSTUDYGUI::closeStudy()")
    get_aster_gui().close()

def onSelectionUpdated(entryList):
    """
    called when selection is modified on other views (modules, viewers...)
    """
    debug_message("ASTERSTUDYGUI::onSelectionUpdated()", entryList)
    get_aster_gui().onSelectionUpdated(entryList)
